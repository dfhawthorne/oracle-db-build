---
# ------------------------------------------------------------------------------
# Installs and configures a 19C database
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Only support Oracle RDBMS 19C on Oracle Linux 7+
# ------------------------------------------------------------------------------

- name:                 "Only support Oracle RDBMS 19C on Oracle Linux 7+"
  ansible.builtin.assert:
    msg:                "Only support Oracle RDBMS 19C on Oracle Linux 7+"
    that:  
      -                 ansible_distribution == "OracleLinux"
      -                 ansible_distribution_major_version >= '7'

# ------------------------------------------------------------------------------
# Global Variables for Script
# ------------------------------------------------------------------------------

- name:                 "Include Variables for Selected PSU"
  ansible.builtin.include_vars:
    file:               "PSU{{ DB_PSU }}.yml"

- name:                 "Set global variables"
  ansible.builtin.set_fact:
    response_file:      "{{ oracle_user_home }}/db_install.rsp"
    opatch_source:      "{{ nfs_software_dir }}/OPatch/{{ min_opatch_vers }}/p6880880_190000_Linux-x86-64.zip"

- name:                 "Must define RDBMS_PATCH_ID and OJVM_PATCH_ID"
  ansible.builtin.assert:
    msg:                "Must define RDBMS_PATCH_ID and OJVM_PATCH_ID"
    that:  
      -                 rdbms_patch_id is defined
      -                 ojvm_patch_id is defined

# ----------------------------------------------------------------------------
# The Oracle preinstallation RPM should only be installed once, even if
#   a more newer version exists as the RPM creates users and does system
#   configuration.
# ----------------------------------------------------------------------------

- name:                 "Install Oracle Preinstallation RPM"
  ansible.builtin.yum:
    name:               "{{ pre_install_rpm }}"
    state:              present
  become:               yes
  become_user:          root

# ------------------------------------------------------------------------------
# Apply fix as recommended by "OPatch apply for OJVM RU fails with "make: perl:
# Command not found make: *** [ins_rdbms.mk:573: javavm_refresh] Error 127"
# (Doc ID 2978451.1)"
# ------------------------------------------------------------------------------

- name:                 "Install Perl"
  ansible.builtin.yum:
    name:               perl
    state:              present
  become:               yes
  become_user:          root

# ------------------------------------------------------------------------------
# Create directories and scripts for database installation and patching
# ------------------------------------------------------------------------------

- name:                 "Create files for silent installation"
  ansible.builtin.template:
    src:                "{{ item.dest | basename  }}.j2"
    dest:               "{{ item.dest }}"
    mode:               "{{ item.mode }}"
  become:               yes
  become_user:          oracle
  with_items:
  - { dest: "{{ response_file }}", mode: "0600" }
  - { dest: "{{ sw_installer }}", mode: "0700" }
  - { dest: "{{ config_rdbms }}", mode: "0700" }
  - { dest: "{{ apply_patches }}", mode: "0700" }

- name:                 "Create directory for Installation Software"
  ansible.builtin.file:
    name:               "{{ oracle_home }}"
    group:              "{{ install_group }}"
    owner:              oracle
    state:              directory
    mode:               0775
  become:               yes
  become_user:          root

- name:                 "Extract the Oracle Software Installer"
  ansible.builtin.unarchive:
    creates:            "{{ oracle_home }}/runInstaller"
    dest:               "{{ oracle_home }}"
    group:              "{{ install_group }}"
    owner:              oracle
    remote_src:         yes
    src:                "{{ sw_archive }}"
  become:               yes
  become_user:          oracle

- name:                 "Create directories for Patches"
  ansible.builtin.file:
    name:               "{{ item.dest }}"
    group:              "{{ install_group }}"
    owner:              oracle
    state:              directory
    mode:               0775
  become:               yes
  become_user:          oracle
  loop:                 "{{ patch_archives }}"

- name:                 "Extract the patches"
  ansible.builtin.unarchive:
    creates:            "{{ item.creates }}"
    dest:               "{{ item.dest }}"
    group:              "{{ install_group }}"
    owner:              oracle
    remote_src:         yes
    src:                "{{ item.src }}"
  become:               yes
  become_user:          oracle
  loop:                 "{{ patch_archives }}"

- name:                 "Check if db s/w has been installed"
  ansible.builtin.command:
    argv:
      -                 "{{ opatch_bin }}"
      -                 lsinventory
      -                 "-oh"
      -                 "{{ oracle_home }}"
  failed_when:          false
  changed_when:         false
  register:             db_sw_installed
  become:               yes
  become_user:          oracle

- name:                 "Display inventory listing for OH={{ oracle_home }}"
  ansible.builtin.debug:
    var:                db_sw_installed.stdout_lines
  when:                 db_sw_installed.stdout_lines is defined

- name:                 "Install Oracle DB Software in Silent Mode"
  ansible.builtin.command:
    argv:
    -                   "{{ sw_installer }}"
    chdir:              "{{ oracle_home }}"
  register:             db_install_result
  become:               yes
  become_user:          oracle
  failed_when:          "'[FATAL]' in db_install_result.stderr"
  when:
  -                     db_sw_installed.stdout is defined
  -                     db_sw_installed.stdout is not search("Oracle Database 19c")

- name:                 "Output from Install Oracle DB Software in Silent Mode"
  ansible.builtin.debug:
    var:                db_install_result.stdout_lines
  when:                 db_install_result.stdout_lines is defined

- name:                 "Errors from Install Oracle DB Software in Silent Mode"
  ansible.builtin.debug:
    var:                db_install_result.stderr_lines
  when:                 db_install_result.stderr_lines is defined

- name:                 "Run orainstRoot.sh after Oracle Database Software Installation"
  ansible.builtin.command:
    argv:
    -                   "{{ inventory_location }}/orainstRoot.sh"
  register:             orainstRoot
  when:
  -                     db_install_result.stdout is defined
  -                     db_install_result.stdout is search('/orainstRoot.sh')
  become:               yes
  become_user:          root

- name:                 "Output from orainstRoot.sh script"
  ansible.builtin.debug:
    var:                orainstRoot.stdout_lines
  when:                 orainstRoot.stdout_lines is defined

- name:                 "Run root.sh after Oracle Database Software Installation"
  ansible.builtin.command:
    argv:
    -                   "{{ oracle_home }}/root.sh"
  register:             db_root
  when:
  -                     db_install_result.stdout is defined
  -                     db_install_result.stdout is search('/root.sh')
  become:               yes
  become_user:          root

- name:                 "Output from root.sh script"
  ansible.builtin.debug:
    var:                db_root.stdout_lines
  when:                 db_root.stdout_lines is defined

- name:                 "Complete the configuration"
  ansible.builtin.command:
    argv:
    -                   "{{ oracle_home }}/runInstaller"
    -                   "-executeConfigTools"
    -                   "-responseFile"
    -                   "{{ response_file }}"
    -                   "-silent"
  register:             executeConfigTools
  when:
  -                     db_install_result.stdout is defined
  -                     "'-executeConfigTools' in db_install_result.stdout"
  failed_when:          "'[FATAL]' in executeConfigTools.stderr"
  become:               yes
  become_user:          oracle

- name:                 "Output from executeConfigTools script"
  ansible.builtin.debug:
    var:                executeConfigTools.stdout_lines
  when:                 executeConfigTools.stdout_lines is defined

- name:                 "Get current version of OPatch"
  ansible.builtin.command:
    argv:
    -                   "{{ opatch_bin }}"
    -                   version
    chdir:              "{{ oracle_home }}/OPatch"
  register:             opatch_vers_data
  changed_when:         false
  become:               yes
  become_user:          oracle

- name:                 "Extract version of OPatch from command output"
  ansible.builtin.set_fact:
    opatch_version:     "{{ opatch_vers_data.stdout_lines[0].split(' ')[2] }}"
  when:                 opatch_vers_data.stdout_lines is defined

- name:                 "Install latest version of OPatch (P6880880)"
  ansible.builtin.unarchive:
    dest:               "{{ oracle_home }}"
    owner:              oracle
    group:              "{{ install_group }}"
    remote_src:         yes
    src:                "{{ opatch_source }}"
  become:               yes
  become_user:          oracle
  when:
  -                     opatch_version is defined
  -                     opatch_version is version(min_opatch_vers, operator='lt', strict=false)

# ------------------------------------------------------------------------------
# Patch Oracle DB Software
# ------------------------------------------------------------------------------

- name:                 "Patch Oracle DB Software"
  ansible.builtin.command:
    argv:
    -                   "{{ apply_patches }}"
    chdir:              "{{ oracle_home }}"
  register:             opatch_apply
  changed_when: >
    (opatch_apply.stdout is search('Patch \d+ successfully applied'))
  become:               yes
  become_user:          oracle

- name:                 "Output from apply of patches into Oracle Home"
  ansible.builtin.debug:
    var:                opatch_apply.stdout_lines
  when:                 opatch_apply.stdout_lines is defined

# ------------------------------------------------------------------------------
# Configure DB
# ------------------------------------------------------------------------------

- name:                 "Configure Oracle DB in Silent Mode"
  ansible.builtin.command:
    argv:
    -                   "{{ config_rdbms }}"
    chdir:              "{{ oracle_user_home }}"
  register:             db_config_result
  become:               yes
  become_user:          oracle
  failed_when:          "'[FATAL]' in db_config_result.stdout"
  changed_when:         "'DB configured.' in db_config_result.stdout"

- name:                 "Output from Configure Oracle DB in Silent Mode"
  ansible.builtin.debug:
    var:                db_config_result.stdout_lines
  when:                 db_config_result.stdout_lines is defined

...
