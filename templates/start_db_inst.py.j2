#!/usr/libexec/platform-python
# ------------------------------------------------------------------------------
# Configures the database on the System Under Test (SUT) for use by HammerDB
# ------------------------------------------------------------------------------

import os
import cx_Oracle
import subprocess

os.environ['ORACLE_BASE'] = '{{ oracle_base }}'
os.environ['ORACLE_SID']  = '{{ SID }}'
os.environ['ORACLE_HOME'] = '{{ oracle_home }}'

oracle_bin                = '{{ oracle_home }}/bin'

# ------------------------------------------------------------------------------
# Start listener
# ------------------------------------------------------------------------------

lp                        = subprocess.Popen(                                  \
                                [f'{oracle_bin}/lsnrctl', 'status'],           \
                                stdout=subprocess.PIPE,                        \
                                stderr=subprocess.PIPE                         \
                            )

lout                      = str(lp.stdout.read())

if lout.find('TNS-00511: No listener') >= 0:
    print("Start listener")
    lp                    = subprocess.Popen(                                  \
                                [f'{oracle_bin}/lsnrctl', 'start'],            \
                                stdout=subprocess.PIPE,                        \
                                stderr=subprocess.PIPE                         \
                            )
    lout                  = str(lp.stdout.read())
    if lout.find("The command completed successfully") >= 0:
        print("Listener started successfully")
    else:
        print(lout, file=sys.stderr)
        exit(1)
elif lout.find("The command completed successfully") >= 0:
    print("Listener is running")
else:
    print(lout, file=sys.stderr)
    exit(1)

# ------------------------------------------------------------------------------
# Get initial status of database instance
# ------------------------------------------------------------------------------

status = None
conn   = None
cursor = None

try:
    conn   = cx_Oracle.connect("/", mode=cx_Oracle.SYSDBA)
    cursor = conn.cursor()
    cursor.execute("SELECT status FROM v$instance")
    (status, ) = cursor.fetchone()
except cx_Oracle.OperationalError as ex:
    err = str(ex).split('\n')[0]
    if err != "ORA-01034: ORACLE not available":
        raise
    else:
        status = "NOT STARTED"

# ------------------------------------------------------------------------------
# Start up instance, if required
# ------------------------------------------------------------------------------

if status == "NOT STARTED":
    conn   = cx_Oracle.connect("/", mode=cx_Oracle.SYSDBA | cx_Oracle.PRELIM_AUTH)
    conn.startup()
    conn.close()
    conn   = None
    status = "STARTED"
    print("CDB instance started")

# ------------------------------------------------------------------------------
# Mount and open the database instance, if required
# ------------------------------------------------------------------------------

if conn == None:
    conn   = cx_Oracle.connect("/", mode=cx_Oracle.SYSDBA)
    cursor = None

if cursor == None:
    cursor = conn.cursor()

if status == "STARTED":
    cursor.execute("alter database mount")
    status = "MOUNTED"
    print("CDB Database mounted")

if status == "MOUNTED":
    cursor.execute("alter database open")
    status = "OPEN"
    print("CDB Database opened")

cursor.execute("SELECT status, logins, database_status FROM v$instance")
(status, logins, database_status) = cursor.fetchone()

print(f'Status of CDB Instance is {status}, status of database is {database_status}, and logins are {logins}')

if logins == 'RESTRICTED':
    cursor.execute('ALTER SYSTEM DISABLE RESTRICTED SESSION')
    print('Logins are now allowed.')

# ------------------------------------------------------------------------------
# Open the pluggable database, if required
# ------------------------------------------------------------------------------

cursor.execute("select open_mode from v$pdbs where name='{{ PDBName }}'")
(pdb_open_mode, ) = cursor.fetchone()
if pdb_open_mode == "MOUNTED":
    try:
        cursor.execute("ALTER PLUGGABLE DATABASE {{ PDBName }} OPEN")
        print("PDB ({{ PDBName }}) opened")
    except cx_Oracle.DatabaseError as exc:
        print(f"Open of PDB ({{ PDBName }}) failed:");
        error, = exc.args
        print("Oracle-Error-Code:", error.code)
        print("Oracle-Error-Message:", error.message)
        exit(1)

# ------------------------------------------------------------------------------
# Save the state of the pluggable database, if required
# ------------------------------------------------------------------------------

cursor.execute("SELECT open_mode FROM v$pdbs WHERE name='{{ PDBName }}'")
(pdb_open_mode, ) = cursor.fetchone()

print(f'Status of PDB ({{ PDBName }}) is {pdb_open_mode}')

cursor.execute("SELECT state FROM cdb_pdb_saved_states WHERE con_name='{{ PDBName }}'")
row = cursor.fetchone()
if row is None:
    pdb_saved_state = None
else:
    pdb_saved_state = row[0]
if pdb_saved_state is None or pdb_saved_state != "OPEN":
    cursor.execute("ALTER PLUGGABLE DATABASE {{ PDBName }} SAVE STATE")
    print("PDB ({{ PDBName }}) state saved")
else:
    print(f"Saved status of PDB ({{ PDBName }}) is {pdb_saved_state}")

cursor.close()
conn.close()

exit(0)
